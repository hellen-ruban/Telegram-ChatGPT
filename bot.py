import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, Application, CallbackQueryHandler, ContextTypes, CommandHandler, MessageHandler, filters, CallbackContext
from gpt import ChatGptService
from util import (load_message, send_text, send_image, show_main_menu,
                  default_callback_handler, load_prompt)
import credentials
from credentials import BOT_TOKEN
from openai import OpenAI
from dotenv import load_dotenv
import logging
import httpx
from credentials import GROQ_API_KEY
import random


'''–°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram'''
chat_gpt = ChatGptService(credentials.ChatGPT_TOKEN)
app = ApplicationBuilder().token(credentials.BOT_TOKEN).build()

'''–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º
–ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –≤ –∫–æ–¥–µ –±–æ—Ç–∞ —Å–ª—É—á–∏—Ç—Å—è –æ—à–∏–±–∫–∞, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ error_handler –∑–∞–ø–∏—à–µ—Ç –µ–µ –≤ –ª–æ–≥–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
–≤–º–µ—Å—Ç–æ –≤—ã–≤–æ–¥–∞ "No error handlers are registered, logging exception." –±–æ—Ç –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏.'''
application = Application.builder().token(credentials.BOT_TOKEN).build()
async def error_handler(update, context: CallbackContext):
    print(f"–û—à–∏–±–∫–∞: {context.error}")
application.add_error_handler(error_handler)


'''–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É start —Å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º'''
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
        'random': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é üë§',
        'quiz': '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–≤—ñ–∑—ñ ‚ùì'
        # –î–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–∞ —Ç–∞–∫:
        # 'command': 'button text'

    })

'''1.–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç'''
from openai import RateLimitError  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏

async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_message("random")
    await send_image(update, context, "random")
    await send_text(update, context, text)
    prompt = load_prompt("random")

    try:
        content = await chat_gpt.send_question(prompt, "–î–∞–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç")
        await send_text(update, context, content)
    except RateLimitError:
        await send_text(update, context, "–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ OpenAI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


'''2.ChatGPT —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å'''
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.replace("/gpt", "").strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = load_message("gpt")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if not user_message:
        await send_image(update, context, "gpt")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await send_text(update, context, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /gpt.")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ ChatGPT —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    try:
        content = await chat_gpt.send_question(user_message, "–í—ñ–¥–ø–æ–≤—ñ–¥—å ChatGPT")
        await send_text(update, context, content)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    except RateLimitError:
        await send_text(update, context, "–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ OpenAI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


'''3.–î—ñ–∞–ª–æ–≥ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é'''

personalities = [
    ("–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω", 'talk_cobain', 'talk_cobain.jpg'),
    ("–°—Ç—ñ–≤–µ–Ω –ì–æ–∫—ñ–Ω–≥", 'talk_hawking', 'talk_hawking.jpg'),
    ("–§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ", 'talk_nietzsche', 'talk_nietzsche.jpg'),
    ("–ö–æ—Ä–æ–ª–µ–≤–∞ –Ñ–ª–∏–∑–∞–≤–µ—Ç–∞ II", 'talk_queen', 'talk_queen.jpg'),
    ("–î–∂.–†.–†. –¢–æ–ª–∫—ñ–Ω", 'talk_tolkien', 'talk_tolkien.jpg')
]
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—É—Ç–∏
def load_prompt(name):
    prompt_path = os.path.join("resources", "prompts", name + ".txt")
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {prompt_path}")

    if os.path.exists(prompt_path):
        with open(prompt_path, "r") as file:
            return file.read()
    else:
        print(f"–§–∞–π–ª {name}.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(name, callback_data=data)] for name, data, _ in personalities]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_image(update, context, 'talk')
    await send_text(update, context, "–û–±–µ—Ä—ñ—Ç—å –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –¥–ª—è –¥—ñ–∞–ª–æ–≥—É:")
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –¥–ª—è –¥—ñ–∞–ª–æ–≥—É:", reply_markup=reply_markup)

async def talk_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –ª–∏—á–Ω–æ—Å—Ç–∏, –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    selected_code = f"talk_{query.data.split('_')[1]}"
    selected_name, _, image_filename = next((name, code, img) for name, code, img in personalities if code == selected_code)

    print(f"–û–±—Ä–∞–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂:  {selected_name} ({selected_code})")

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = os.path.join(os.getcwd(), "resources", "images", image_filename)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–∞
    prompt = load_prompt(selected_code)

    if prompt is None:
        await query.edit_message_text(text=f"–ü—Ä–æ–º—Ç –¥–ª—è {selected_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
    if os.path.exists(image_path):
         with open(image_path, 'rb') as image_file:
            await query.message.reply_photo(photo=image_file, caption=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ {selected_name}. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.")
    else:
         await query.message.reply_text(text=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ {selected_name}. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.")

    context.user_data['selected_person'] = prompt

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    end_button = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏", callback_data="end_talk")]])
    await query.edit_message_text(text=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ {selected_name}. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.", reply_markup=end_button)

    # await query.edit_message_text(text=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ {selected_name}. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.")
    context.user_data['selected_person'] = prompt
# –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    await send_text(update, context, "–ó–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ ChatGPT.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    if not user_message:
        return

    prompt = context.user_data.get('selected_person', None)
    if not prompt:
        await send_text(update, context, "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /talk.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ ChatGPT
    gpt_request = f"–¢–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à —É —Å—Ç–∏–ª—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–ø–∏—Å—É:\n\n{prompt}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—Ç–∞—î: {user_message}"
    content = await chat_gpt.send_question(gpt_request, "–í—ñ–¥–ø–æ–≤—ñ–¥—å ChatGPT")
    # await send_text(update, context, content)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏" –∫ –æ—Ç–≤–µ—Ç—É ChatGPT
    end_button = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏", callback_data="end_talk")]])
    await update.message.reply_text(content, reply_markup=end_button)

async def end_talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫—ñ–Ω—á–∏—Ç–∏' ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
    context.user_data.pop('selected_person', None)

    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
        'random': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é üë§',
        'quiz': '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–≤—ñ–∑—ñ ‚ùì'
    })

'''4.–ö–≤—ñ–∑'''

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
CHATGPT_TOKEN = os.getenv("YOUR_OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
from credentials import YOUR_OPENAI_API_KEY
CHATGPT_TOKEN = YOUR_OPENAI_API_KEY
client = OpenAI(api_key=CHATGPT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –¢–µ–º—ã –∫–≤–∏–∑–∞
QUIZ_TOPICS = {
    "quiz_prog": "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
    "quiz_math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "quiz_biology": "–ë—ñ–æ–ª–æ–≥—ñ—è"
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_scores = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def send_image(update: Update, context: ContextTypes.DEFAULT_TYPE, image_name: str):
    image_path = os.path.join("resources", "images", f"{image_name}.jpg")
    if os.path.exists(image_path):
        with open(image_path, "rb") as img:
            await update.message.reply_photo(photo=img)
    else:
        logging.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
def load_prompt():
    prompt_path = os.path.join("resources", "prompts", "quiz.txt")
    if os.path.exists(prompt_path):
        with open(prompt_path, "r", encoding="utf-8") as file:
            return file.read()
    logging.warning("–§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return ""


# –ó–∞–ø—Ä–æ—Å –∫ ChatGPT
async def ask_chatgpt(prompt: str, user_input: str):
    client = OpenAI(api_key=CHATGPT_TOKEN)
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": f"{prompt}\n{user_input}"}],
        max_tokens=50
    )

    return response.choices[0].text.strip()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {"state": "choosing_topic", "score": 0}

    await send_image(update, context, "quiz")

    keyboard = [[InlineKeyboardButton(topic, callback_data=code)] for code, topic in QUIZ_TOPICS.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –∫–≤—ñ–∑—É:", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
async def handle_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    topic_code = query.data
    user_states[user_id] = {"state": "answering", "topic": topic_code, "score": 0}

    prompt = load_prompt()
    question = await ask_chatgpt(prompt, topic_code)
    user_states[user_id]["question"] = question

    await query.edit_message_text(
        f"–¢–µ–º–∞: {QUIZ_TOPICS[topic_code]}\n\n–ü–∏—Ç–∞–Ω–Ω—è: {question}\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_answer = update.message.text

    if user_id not in user_states or user_states[user_id]["state"] != "answering":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∫–≤—ñ–∑ –∫–æ–º–∞–Ω–¥–æ—é /quiz")
        return

    topic_code = user_states[user_id]["topic"]
    question = user_states[user_id]["question"]

    prompt = load_prompt()
    check_response = await ask_chatgpt(prompt, f"{question}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: {user_answer}")

    if "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" in check_response:
        user_states[user_id]["score"] += 1

    keyboard = [
        [InlineKeyboardButton("–©–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="quiz_more")],
        [InlineKeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏", callback_data="end_quiz")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"{check_response}\n\n–í–∞—à —Ä–∞—Ö—É–Ω–æ–∫: {user_states[user_id]['score']}\n\n–©–æ –¥–∞–ª—ñ?",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def handle_next_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    action = query.data

    if action == "quiz_more":
        topic_code = user_states[user_id]["topic"]
        prompt = load_prompt()
        question = await ask_chatgpt(prompt, topic_code)
        user_states[user_id]["question"] = question

        await query.edit_message_text(
            f"–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è: {question}\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")

    elif action == "end_quiz":
        score = user_states[user_id]["score"]
        del user_states[user_id]
        await query.edit_message_text(f"–ö–≤—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {score}")


    # if action == "quiz_more":
    #     # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    #     question = await chat_gpt.send_question(load_prompt, user_states[user_id]["topic"])
    #     user_states[user_id]["current_question"] = question
    #     await query.edit_message_text(f"–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è: {question}")
    # elif action == "change_topic":
    #     # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã
    #     await quiz_command(update, context)
    # elif action == "end_quiz":
    #     # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
    #     final_score = user_scores[user_id]
    #     del user_states[user_id]
    #     del user_scores[user_id]
    #     await query.edit_message_text(f"–ö–≤—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–∞—à —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {final_score}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    '''# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await app.run_polling()'''


# if __name__ == '__main__':
#     import asyncio
#
#     asyncio.run(main())

'''–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂–Ω–∞ —Ç–∞–∫:'''
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler("quiz", quiz_command))
# app.add_handler(CallbackQueryHandler(button, pattern='^(menu_|other_)'))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è)
app.add_handler(CallbackQueryHandler(talk_button, pattern='^talk_'))  # –î–ª—è –æ–±—â–µ–Ω–∏—è —Å –ª–∏—á–Ω–æ—Å—Ç—å—é
app.add_handler(CallbackQueryHandler(end_talk, pattern="^end_talk$"))
app.add_handler(CallbackQueryHandler(handle_topic_selection, pattern="^quiz_"))
app.add_handler(CallbackQueryHandler(handle_next_action, pattern="^(quiz_more|end_quiz)$")) # –¥–ª—è –∫–≤–∏–∑–∞
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è


'''–ó–∞–ø—É—Å–∫ bot-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'''
app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())


'''(–ü–æ –∂–µ–ª–∞–Ω–∏—é) –∫–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∫ ChatGPT, 
—á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–æ—Ç–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /gpt."""

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_message = update.message.text.strip()
        if not user_message:
            return
        content = await chat_gpt.send_question(user_message, "–í—ñ–¥–ø–æ–≤—ñ–¥—å ChatGPT")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ ChatGPT
        await send_text(update, context, content)
        
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))'''


# –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ª–±–µ–∫—É –º–æ–∂–Ω–∞ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))

# app.add_handler(CallbackQueryHandler(default_callback_handler, pattern='^talk_*'))
#app.run_polling()
#print(f"GROQ_API_KEY –∑–∞–≥—Ä—É–∂–µ–Ω: {GROQ_API_KEY[:5]}********")




"""4.2 –ö–≤i–∑ —á–µ—Ä–µ–∑ Groq:

async def send_groq_request(message: str) -> str:
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json",
    }

    payload = {
        "model": "llama3-8b-8192",  # –ò–ª–∏ "gemma-7b-it"
        "messages": [
           # {"role": "system", "content": "You are a helpful assistant."},
                     {"role": "user", "content": message + " —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"}],
        "max_tokens": 50
    }

    async with httpx.AsyncClient() as client:
        response = await client.post("https://api.groq.com/openai/v1/chat/completions", json=payload, headers=headers)
        data = response.json()

    print("–û—Ç–≤–µ—Ç API:", data)  # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Groq API
async def generate_quiz_question(topic: str) -> str:
    prompt_map = {
        'quiz_prog': '–ó–∞–¥–∞–π –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —Ç–µ–º—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é python.',
        'quiz_math': '–ó–∞–¥–∞–π –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —Ç–µ–º—É –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö —Ç–µ–æ—Ä—ñ–π.',
        'quiz_biology': '–ó–∞–¥–∞–π –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —Ç–µ–º—É –±—ñ–æ–ª–æ–≥—ñ—ó.'
    }
    prompt = prompt_map.get(topic, "–ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–µ–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

    data = await send_groq_request(prompt)
     # headers = {
    #     "Authorization": f"Bearer {GROQ_API_KEY}",
    #     "Content-Type": "application/json",
    # }

    # payload = {
    #     "model": "llama3-8b-8192",  # –ò–ª–∏ "gemma-7b-it"
    #     "messages": [
    #        # {"role": "system", "content": "You are a helpful assistant."},
    #                  {"role": "user", "content": prompt + " —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"}],
    #     "max_tokens": 50
    # }
    #
    # async with httpx.AsyncClient() as client:
    #     response = await client.post("https://api.groq.com/openai/v1/chat/completions", json=payload, headers=headers)
    #     data = response.json()
    #
    # print("–û—Ç–≤–µ—Ç API:", data)  # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –∫–ª—é—á 'choices'
    # if "choices" in data and data["choices"]:
    #     return data["choices"][0]["message"]["content"]
    # elif "error" in data:
    #     return f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ API: {data['error']['message']}"
    # else:
    #     return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    #
    # async with httpx.AsyncClient() as client:
    #     response = await client.post("https://api.groq.com/openai/v1/chat/completions", json=payload, headers=headers)
    #     data = response.json()

    return data["choices"][0]["message"]["content"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /quiz
async def quiz(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", callback_data='quiz_prog')],
        [InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data='quiz_math')],
        [InlineKeyboardButton("–ë—ñ–æ–ª–æ–≥—ñ—è", callback_data='quiz_biology')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –∫–≤—ñ–∑—É:', reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
async def quiz_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    topic = query.data
    question = await generate_quiz_question(topic)
    context.user_data['current_topic'] = topic
    context.user_data['current_question'] = question
    # context.user_data['correct_answer'] = question  # –ó–∞–≥–ª—É—à–∫–∞, –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    await query.edit_message_text(text=f"–¢–µ–º–∞: {topic.capitalize()}\n–ü–∏—Ç–∞–Ω–Ω—è: {question}\n–í–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ?")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_answer(update: Update, context: CallbackContext) -> None:
    user_answer = update.message.text.lower()
    # correct_answer = context.user_data.get('correct_answer', "").lower()
    #
    #
    # if user_answer == correct_answer:
    #     response = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    # else:
    #     response = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - {correct_answer}"

    data = await send_groq_request('–ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å?' + user_answer)
    response = data["choices"][0]["message"]["content"]
    # if "choices" in data and data["choices"]:
    #     response = data["choices"][0]["message"]["content"]
    # elif "error" in data:
    #     response = f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ API: {data['error']['message']}"
    # else
    #     response = "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

    keyboard = [
        [InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data='next_question')],
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É", callback_data='change_topic')],
        [InlineKeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –∫–≤—ñ–∑", callback_data='end_quiz')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(response, reply_markup=reply_markup)

async def handler_message(update: Update, context: CallbackContext) -> None:
    if (context.user_data.get('current_question') != None):
        await handle_answer(update, context)
        context.user_data['current_question'] = None
    else:
        await handle_text(update, context)
        
        app.add_handler(CallbackQueryHandler(quiz_button, pattern='^(quiz_|next_question|change_topic|end_quiz)'))  # –î–ª—è –∫–≤–∏–∑–∞
    """
